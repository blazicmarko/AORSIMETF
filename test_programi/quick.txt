100, C0 //LD #0
101, C0
102, 00
103, 00
104, C2 //ST R63 --0 za adresiranje
105, 3F
106, C0 //LD #2000 --adresa FIKTIVNOG steka
107, C0
108, 00
109, 20
10A, C2 //ST R62 --ovaj registar simulira sp
10B, 3E
10C, C0 //LD (R63)#1010
10D, 7F
10E, 10
10F, 10
110, C2 //ST R0 --adresa niza
111, 00
112, C0 //LD (R63)#1000
113, 7F
114, 00
115, 10
116, 87 //LSL --mnozenje sa dva, zbog velicine podataka
117, C2 //ST R1 --broj elemenata
118, 01
119, C0 //LD R63
11A, 3F
11B, C2 //ST R2 --low_index
11C, 02
11D, C0 //LD R1
11E, 01
11F, C5 //SUB #2 !!!!
120, C0
121, 02
122, 00
123, C2 //ST R3
124, 03
125, 61 //JSR --jsr to quicksort recursive
126, 00
127, 02
128, 90 //HALT

200, C0 //LD R2 ::START OF quicksortRecursive
201, 02
202, C5 //SUB R3
203, 03
204, 01 //BGRE --jmp if i>=j on postIf
205, 18
206, 01
207, C0 //LD R2 --load low_index
208, 02
209, C2 //ST (R62)#0 --push r2=low_index
20A, 7E
20B, 00
20C, 00
20D, C0 //LD R62 --load sp
20E, 3E
20F, C4 //ADD #2 --sp=sp+2
210, C0
211, 02
212, 00
213, C2 //ST R62 --store sp
214, 3E
215, C0 //LD R3 --load high_index
216, 03
217, C2 //ST (R62)#0 --push r3=high_index
218, 7E
219, 00
21A, 00
21B, C0 //LD R62 --load sp
21C, 3E
21D, C4 //ADD #2 --sp=sp+2
21E, C0
21F, 02
220, 00
221, C2 //ST R62 --store sp
222, 3E
223, C0 //LD R3 --load high_index
224, 03
225, C4 //ADD #2 --r3=j=high_index+2
226, C0
227, 02
228, 00
229, C2 //ST R3 --store high_index
22A, 03
22B, C0 //LD R0 --load array address
22C, 00
22D, C4 //ADD R2 --array+low_index
22E, 02
22F, C2 //ST R5 --r5=pivot address=r0+r2
230, 05
231, C0 //LD (R5)#0 --pivot element
232, 45
233, 00
234, 00
235, C2 //ST R4 --r4=pivot element
236, 04
237, C0 //LD R2 --load low_index ::START OF iIncrease
238, 02
239, C4 //ADD #2 --r2=r2+2(i=i+2) 
23A, C0
23B, 02
23C, 00
23D, C2 //ST R2 --store low_index
23E, 02
23F, C0 //LD R2 --load i
240, 02
241, C5 //SUB R3 --sub j
242, 03
243, 01 //BGRE --jmp if i>=j on end_iIncrease
244, 12
245, 00
246, C0 //LD R0 --load array address
247, 00
248, C4 //ADD R2  --add i
249, 02
24A, C2 //ST R6 --r6=address of a[i]
24B, 06
24C, C0 //LD (R6)#0 --load element a[i]
24D, 46
24E, 00
24F, 00
250, C5 //SUB R4 --sub pivot element
251, 04
252, 01 //BGRE --jmp if a[i]>=pivot on end_iIncrease
253, 03
254, 00
255, 60 //JMP --jmp on iIncrease
256, 37
257, 02
258, C0 //LD R3 --load j ;end_iIncrease::START OF jDecrease 
259, 03
25A, C5 //SUB #2 --r3=r3-2(j=j-2)
25B, C0
25C, 02
25D, 00
25E, C2 //ST R3 --store r3
25F, 03
260, C0 //LD R0 --load array address
261, 00
262, C4 //ADD R3 --add j
263, 03
264, C2 //ST R7 --r7=address of a[j]
265, 07
266, C0 //LD (R7)#0 --load element a[j]
267, 47
268, 00
269, 00
26A, C5 //SUB R4 --sub pivot element
26B, 04
26C, 03 //BLEQ --jmp if a[j]<=pivot on end_jDecrease !!!
26D, 03
26E, 00
26F, 60 //JMP --jmp on jDecrease
270, 58
271, 02
272, C0 //LD R2 --load i ;end_jDecrease
273, 02
274, C5 //SUB R3 --sub j
275, 03
276, 01 //BGRE --jmp if i>=j on endMain
277, 17
278, 00
279, C0 //LD (R6)#0 --load a[i]
27A, 46
27B, 00
27C, 00
27D, C2 //ST R8 --r8=element a[i]
27E, 08
27F, C0 //LD (R7)#0 --load a[j]
280, 47
281, 00
282, 00
283, C2 //ST (R6)#0 --a[i]=a[j]
284, 46
285, 00
286, 00
287, C0 //LD R8 --load a[i]
288, 08
289, C2 //ST (R7)#0 --a[j]=a[i]
28A, 47
28B, 00
28C, 00
28D, 60 //JMP --jmp on startMain
28E, 37
28F, 02
290, C0 //LD R62 --load sp ;endMain
291, 3E
292, C5 //SUB #2 --sp=sp-2
293, C0
294, 02
295, 00
296, C2 //ST R62 --store sp
297, 3E
298, C0 //LD (R62)#0 --pop high_index
299, 7E
29A, 00
29B, 00
29C, C2 //ST R9 --r9=high_index restored
29D, 09
29E, C0 //LD R62 --load sp
29F, 3E
2A0, C5 //SUB #2 --sp=sp-2
2A1, C0
2A2, 02
2A3, 00
2A4, C2 //ST R62 --store sp
2A5, 3E
2A6, C0 //LD (R62)#0 --pop low_index
2A7, 7E
2A8, 00
2A9, 00
2AA, C2 //ST R10 --r10=low_index restored
2AB, 0A
2AC, C0 //LD R10 --load low_index restored
2AD, 0A
2AE, C5 //SUB R3 --sub j
2AF, 03
2B0, 08 //BEQL --jmp if low_index restored=j on endSwap
2B1, 1A
2B2, 00
2B3, C0 //LD R0 --address of array
2B4, 00
2B5, C4 //ADD R10 --add low_index restored
2B6, 0A
2B7, C2 //ST R11 --r11=address of a[low]
2B8, 0B
2B9, C0 //LD (R11)#0 --a[low_index restored]
2BA, 4B
2BB, 00
2BC, 00
2BD, C2 //ST R12 --r12=a[low_index restored]
2BE, 0C
2BF, C0 //LD (R7)#0 --load a[j]
2C0, 47
2C1, 00
2C2, 00
2C3, C2 //ST (R11)#0 --a[low restored]=a[j]
2C4, 4B
2C5, 00
2C6, 00
2C7, C0 //LD R12 --load a[low restored]
2C8, 0C
2C9, C2 //ST (R7)#0 --a[j]=a[low restored]
2CA, 47
2CB, 00
2CC, 00
2CD, C0 //LD R10 --load low_index restored ;endSwap
2CE, 0A
2CF, C2 //ST R2 --r2=low_index restored
2D0, 02
2D1, C0 //LD R9
2D2, 09
2D3, C2 //ST (R62)#0 --push high_index
2D4, 7E
2D5, 00
2D6, 00
2D7, C0 //LD R62 --load sp
2D8, 3E
2D9, C4 //ADD #2 --sp=sp+2
2DA, C0
2DB, 02
2DC, 00
2DD, C2 //ST R62 --store sp
2DE, 3E
2DF, C0 //LD R3 --load j
2E0, 03
2E1, C2 //ST (R62)#0 --push r3=j
2E2, 7E
2E3, 00
2E4, 00
2E5, C0 //LD R62 --load sp
2E6, 3E
2E7, C4 //ADD #2 --sp=sp+2
2E8, C0
2E9, 02
2EA, 00
2EB, C2 //ST R62 --store sp
2EC, 3E
2ED, C0 //LD R3 --load r3=j
2EE, 03
2EF, C5 //SUB #2 --j=j-2
2F0, C0
2F1, 02
2F2, 00
2F3, C2 //ST R3 --store r3
2F4, 03
2F5, 61 //JSR --call quicksortRecursive
2F6, 00
2F7, 02
2F8, C0 //LD R62 --load sp
2F9, 3E
2FA, C5 //SUB #2 --sp=sp-2
2FB, C0
2FC, 02
2FD, 00
2FE, C2 //ST R62 --store sp
2FF, 3E
300, C0 //LD (R62)#0 --j restored
301, 7E
302, 00
303, 00
304, C2 //ST R2 --r2=j restored
305, 02
306, C0 //LD R2 --load j
307, 02
308, C4 //ADD #2 --j=j+2
309, C0
30A, 02
30B, 00
30C, C2// ST R2 --store r2=j
30D, 02
30E, C0 //LD R62 --load sp
30F, 3E
310, C5 //SUB #2 --sp=sp-2
311, C0
312, 02
313, 00
314, C2 //ST R62 --store sp
315, 3E
316, C0 //LD (R62)#0 --high_index restored
317, 7E
318, 00
319, 00
31A, C2 //ST R3 --r3=high_index restored
31B, 03
31C, 61 //JSR --call quicksortRecursive
31D, 00
31E, 02
31F, 80 //RTS --postIf

1000, 08
1010, 00
1011, 15
1500, 41
1501, 01
1502, 01
1503, 01
1504, 06
1505, C5
1506, 39
1507, D6
1508, 63
1509, 06
150A, 1B
150B, 02
150C, 4B
150D, 01
150E, 60
150F, FF